/*•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• Librerias •︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• */
#include <Arduino.h>
#include <stdint.h>
#include <driver/ledc.h>
#include "config.h"

/*•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• Pines •︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• */
#define temp 32    // Pin ADC LM35
#define BTNc 15       // Botón
#define delayBounce 250
#define servo 2
#define pwmChannel1 0 

#define freqPWM 100
#define freqServo 50 
#define resPWM 16

#define ledverde 4
#define ledamar 5
#define ledrojo 18

#define display1 13
#define display2 12
#define display3 14



/*•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• Variables globales •︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• */
volatile bool btncPressed = false;
volatile uint32_t lastISRBtnc = 0;

float tempC = 0.0;
int adcRAW = 0;

// Variables para EMA
float alpha = 0.05;         // Factor de suavizado (0.05–0.3 recomendado)
float adcFiltered = 0.0;   // Valor filtrado inicial
bool primeraLectura = true;
/*•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• Adafruit •︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• */
AdafruitIO_Feed *tempCanal = io.feed("Temperatura");

/*•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• Prototipos de funciones •︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• */
void initBotonc(void);
void IRAM_ATTR BTNc_ISR(void);
void getADCEMA(void);
void encenderleds(bool vala, bool valb, bool valc);
void initPWM(void);

/*•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• ISR •︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• */
void IRAM_ATTR BTNc_ISR(void) {
  uint32_t tiempoActual = millis();
  if (tiempoActual - lastISRBtnc > delayBounce) {
    btncPressed = true;
    lastISRBtnc = tiempoActual;
  }
}

/*•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• Setup •︶°︶•︶°︶•︶°︶•︶°︶•︶°︶•︶°︶• */
void setup() {
  Serial.begin(115200);
  initPWM();
  initBotonc();
  
  pinMode(ledverde, OUTPUT);
  pinMode(ledamar, OUTPUT);
  pinMode(ledrojo, OUTPUT);

  digitalWrite(ledamar, LOW);
  digitalWrite(ledverde, LOW);
  digitalWrite(ledrojo, LOW);

  // Conexión a Adafruit IO
  Serial.print("Conectando a Adafruit IO...");
  io.connect();

  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println(" ¡Conectado!");
  Serial.println(io.statusText());
}

// Loop principal
void loop() {
  io.run(); 
  getADCEMA();  
  // Si se presiona el botón, enviamos el valor filtrado
  if (btncPressed) {
    btncPressed = false; // limpiar bandera
    
    Serial.print("ADC raw: ");
    Serial.print(adcRAW);
    Serial.print(" -> Temp: ");
    Serial.print(tempC);
    Serial.println(" °C");

    tempCanal->save(tempC);
      if (tempC<22.0){
      encenderleds(HIGH,LOW,LOW);
      ledcWrite(pwmChannel1, 3277);
    } else if(tempC>=22.0 && tempC<=25.0){
      encenderleds(LOW, HIGH, LOW);
      ledcWrite(pwmChannel1, 4915);
    } else if(tempC>25.0){
      encenderleds(LOW, LOW, HIGH);
      ledcWrite(pwmChannel1, 6553);
    }
  }

  delay(200); 
}

// Inicializar botón con interrupción
void initBotonc(void) {
  pinMode(BTNc, INPUT_PULLUP);
  attachInterrupt(BTNc, BTNc_ISR, FALLING);
}

void encenderleds(bool vala, bool valb, bool valc) {
  digitalWrite(ledverde, vala);
  digitalWrite(ledamar, valb);
  digitalWrite(ledrojo, valc);
}

void getADCEMA(void) {
  adcRAW = analogReadMilliVolts(temp);
  adcFiltered = alpha * adcRAW + (1 - alpha) * adcFiltered;
  tempC=(adcFiltered/10.0)-6;
  tempC = round(tempC * 10.0) / 10.0;
}
void initPWM(void) {
  ledcSetup(pwmChannel1, freqPWM, resPWM);
  ledcAttachPin(servo, pwmChannel1);
  ledcWrite(pwmChannel1, 0);
}
